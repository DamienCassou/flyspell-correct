* flyspell-correct

[[https://github.com/d12frosted/flyspell-correct/workflows/CI/badge.svg][file:https://github.com/d12frosted/flyspell-correct/workflows/CI/badge.svg]]

| =flyspell-correct=          | [[http://melpa.org/#/flyspell-correct][file:http://melpa.org/packages/flyspell-correct-badge.svg]]          | [[https://stable.melpa.org/#/flyspell-correct][file:https://stable.melpa.org/packages/flyspell-correct-badge.svg]]          |
| =flyspell-correct-ivy=      | [[http://melpa.org/#/flyspell-correct-ivy][file:http://melpa.org/packages/flyspell-correct-ivy-badge.svg]]      | [[https://stable.melpa.org/#/flyspell-correct-ivy][file:https://stable.melpa.org/packages/flyspell-correct-ivy-badge.svg]]      |
| =flyspell-correct-helm=     | [[http://melpa.org/#/flyspell-correct-helm][file:http://melpa.org/packages/flyspell-correct-helm-badge.svg]]     | [[https://stable.melpa.org/#/flyspell-correct-helm][file:https://stable.melpa.org/packages/flyspell-correct-helm-badge.svg]]     |
| =flyspell-correct-popup=    | [[http://melpa.org/#/flyspell-correct-popup][file:http://melpa.org/packages/flyspell-correct-popup-badge.svg]]    | [[https://stable.melpa.org/#/flyspell-correct-popup][file:https://stable.melpa.org/packages/flyspell-correct-popup-badge.svg]]    |
| =flyspell-correct-avy-menu= | [[http://melpa.org/#/flyspell-correct-popup][file:http://melpa.org/packages/flyspell-correct-avy-menu-badge.svg]] | [[https://stable.melpa.org/#/flyspell-correct-popup][file:https://stable.melpa.org/packages/flyspell-correct-avy-menu-badge.svg]] |

Correcting words with flyspell via custom interface.

[[https://d12frosted.io/posts/2016-05-09-flyspell-correct-intro.html][Read intro post]]

This package provides functionality for correcting words via custom interfaces.
There are several functions for this:

- =flyspell-correct-wrapper= - a beefed wrapper for =flyspell-correct-previous=
  and =flyspell-correct-next= allowing one to correct many words at once ([[#rapid-mode][rapid
  mode]]) and change correction direction.
- =flyspell-correct-at-point= - to correct word at point.
- =flyspell-correct-previous= to correct any visible word before the point.
- =flyspell-correct-next= to correct any visible word after the point.

In most cases the last function is the most convenient, so don't forget to bind
it.

#+BEGIN_SRC emacs-lisp
(define-key flyspell-mode-map (kbd "C-;") #'flyspell-correct-wrapper)
#+END_SRC

When invoked, it will highlight the word being currently corrected and will show
the list of corrections suggested by Flyspell.

Most interfaces also allow you to save the new word to your dictionary, accept
this spelling in current buffer or for a whole session, or even skip this word
(useful in a rapid flow).

Default interface is implemented using =completing-read=, but it's highly
advised to use =flyspell-correct-ido= (which comes bundled with this package) or
any other interface provided by the following packages: =flyspell-correct-ivy=,
=flyspell-correct-helm= and =flyspell-correct-popup=.

** Rapid mode
:PROPERTIES:
:ID:                     25719606-9996-4056-9049-18F73A609FF6
:END:

Rapid mode means that you can correct many words in a single invocation of
=flyspell-correct-wrapper= following current direction (usually, backwards). In
order to enable it, one should call =flyspell-correct-wrapper= with universal
argument - =C-u=. For example, =C-u C-;= will do it.

** Deprecations in =v0.5=

Unfortunately, following functions are renamed and their original name is being
deprecated and will be removed in the future (summer 2019).

- =flyspell-correct-next-word-generic= -> =flyspell-correct-next=
- =flyspell-correct-previous-word-generic= -> =flyspell-correct-previous=
- =flyspell-correct-word-generic= -> =flyspell-correct-at-point=

Please make sure to update to new names.

** Using =flyspell-correct-dummy= interface

In order to use =flyspell-correct-dummy= interface you have to install
=flyspell-correct= package in any preferred way and then add following snippet
to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

This interface does not allow to save or accept current spelling.

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :bind ("C-M-;" . flyspell-correct-wrapper))
#+END_SRC

** Using =flyspell-correct-ivy= interface

In order to use =flyspell-correct-ivy= interface you have to install
=flyspell-correct-ivy= package in any preferred way and then add following snippet
to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-ivy)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-ivy
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+END_SRC

Note that in order to access actions in =ivy= interface you need to press ~M-o~.
More on =ivy= mini buffer key bindings you can read in [[http://oremacs.com/swiper/#key-bindings-for-single-selection-action-then-exit-minibuffer][official documentation]].

** Using =flyspell-correct-avy-menu= interface

In order to use =flyspell-correct-avy-menu= interface you have to install
=flyspell-correct-avy-menu= package in any preferred way and then add following
snippet to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-avy-menu)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-avy-menu
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-avy-menu))
#+END_SRC

** Using =flyspell-correct-ido= interface

In order to use =flyspell-correct-ido= interface you have to install
=flyspell-correct= package in any preferred way and then add following snippet
to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-ido)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-ido
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ido))
#+END_SRC

** Using =flyspell-correct-helm= interface

In order to use =flyspell-correct-helm= interface you have to install
=flyspell-correct-helm= package in any preferred way and then add following snippet
to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-helm)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-helm
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-helm))
#+END_SRC

** Using =flyspell-correct-popup= interface

In order to use =flyspell-correct-popup= interface you have to install
=flyspell-correct-popup= package in any preferred way and then add following snippet
to relevant part of your =init.el= file.

#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-popup)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+END_SRC

Or via =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-popup
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-popup))
#+END_SRC

There are some cool usability suggestions by @alphapapa shared in
[[https://github.com/d12frosted/flyspell-correct/issues/30][d12frosted/flyspell-correct#30]] that you might want to use. Enjoy!

* Custom interfaces

One can easily implement custom interface for =flyspell-correct-at-point= (which
is used by other correct functions). It has to be a function that takes two
arguments - candidates and incorrect word. It has to return either replacement
word or ~(command, word)~ tuple, where ~command~ can be one of the following:

- ~skip~ - meaning that no action is required for current incorrect ~word~;
- ~save~ - meaning that the ~word~ must be saved in a dictionary;
- ~session~ - meaning that the ~word~ must be saved for the current session;
- ~buffer~ - meaning that the ~word~ must be saved for the current buffer.

Check =flyspell-correct-popup= for example of interface that uses this feature.

* Highlighting

The word that is being currently corrected (e.g. you are selecting the
correction for misspelled word) is highlighted with
=flyspell-correct-highlight-face=. If you wish to disable extra highlighting,
just set the value of =flyspell-correct-highlight= to =nil=.

#+begin_src emacs-lisp
  (setq flyspell-correct-highlight nil)
#+end_src

* Auto correction mode

/Take my advice and don't use this functionality unless you find
=flyspell-correct-wrapper= function useless for your purposes. Seriously, just
try named function for completion. You can find more info in [[https://github.com/syl20bnr/spacemacs/issues/6209#issuecomment-274320376][this comment]]./

This package also provides auto correction minor mode called
=flyspell-correct-auto-mode=. When enabled it will automatically invoke
=flyspell-correct-previous-word-generic= after certain delay configured by
=flyspell-correct-auto-delay= when there is at least one incorrect word.

#+BEGIN_SRC
(add-hook 'flyspell-mode-hook #'flyspell-correct-auto-mode)
#+END_SRC

One can also configure interface specially for
=flyspell-correct-previous-word-generic= called by =flyspell-correct-auto-mode= by
setting value of =flyspell-correct-auto-mode-interface=.

* Reasoning

There are already packages like =helm-flyspell= and =flyspell-popup=. So why
would anyone create yet another similar package? The reason is simple - to
support another interface or completion system. =flyspell-correct= started
because =ivy= was missing similar to =helm-flyspell= package. But I didn't want
to create a package just for =ivy=. The reasoning is simple - all those packages
should have similar functionality but different interface. Adding something new
to one of these packages ideally should be reflected in all others. So I decided
to create generic package that works with any interfaces. It's not about one
package containing all possible interfaces, but about a package giving you
functionality with an interface of your choice.

* Screenshots

** Ivy interface
 [[file:images/screenshot-ivy-1.png]]

 [[file:images/screenshot-ivy-2.png]]

** Avy Menu interface

TBD

** Popup interface
 [[file:images/screenshot-popup.png]]

** Helm interface
 [[file:images/screenshot-helm.png]]

** Ido interface
 [[file:images/screenshot-ido.png]]

* Acknowledgements

This package is available thanks to these people:

- [[https://github.com/pronobis][Andrzej Pronobis]] for inspiration and [[https://github.com/pronobis/helm-flyspell][helm-flyspell]]
- [[https://github.com/xuchunyang][xuchunyang]] for [[https://github.com/xuchunyang/flyspell-popup][flyspell-popup]]
- [[https://github.com/abo-abo][Oleh Krehel]] for [[https://github.com/abo-abo/swiper][swiper]] and all the help

Additional thanks to all contributors:

- [[https://github.com/Boruch-Baum][Boruch Baum]]
- [[https://github.com/mrBliss][mrBliss]]
- [[https://github.com/syohex][Syohei YOSHIDA]]
- [[https://github.com/vermiculus][Sean Allred]]
- [[https://github.com/manuel-uberti][Manuel Uberti]]
- [[https://github.com/jpkotta][jpkotta]]
- [[https://github.com/clemera][Clemens Radermacher]]
